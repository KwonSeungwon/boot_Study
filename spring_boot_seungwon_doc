[spring boot project 생성방법]
- eclipse or intelli j를 이용해서 생성
- spring initializr을 이용하여 생성 -> https://start.spring.io/

[spring project 구조]
메이븐 기본 프로젝트와 동일
- 소스 코드(src/main/java)
- 소스 리소스(src/main/resource)
- 테스트 코드(src/test/java)
- 테스트 리소스(src/test/resource)
메인 애플리케이션 위치
- 기본 패키지
※ 스프링부트 메인클래스는 메인패키지 아래에 놓는것을 공식적으로 추천함.

[spring boot 의존성 관리 이해]
- spring boot는 stater가 기본적으로 제공하는 dependencies를 알아서(깔끔하게) 관리해준다.
- 특별히 원하는 버전이 있는 경우나 스타터에 포함되지 dependency않는 pom.xml에 버전을 명시해야함
- spring parent를 독자적으로 사용하고 싶은 경우 parent안에 상위에 선언하거나 dependencyManagement 세션을 이용하여 사용한다.
dependencyManagement를 이용 할 경우 spring boot에 필수적인 의존성주입이 사용이 불가능해진다.

[spring boot 의존성 추가]
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
    <version>2.5.0 </version> // 작성시 spring stater가 버전관리는 하는 경우 인텔리제이에서 자동완성이 뜨지않음
</dependency>
※ 버전이 자동관리되어도 버전을 명시해주는 것이 좋다.
- 스프링 스타터에서 제공하는 버전들은 디펜던시스 파일에 설정되어있음.

[Spring boot 자동설정]
- @EnableAutoConfiguration (@SpringBootApplication 안에 숨어 있음)
- 빈은 사실 두 단계로 나눠서 읽힘
- 1단계: @ComponentScan
- 2단계: @EnableAutoConfiguration
- @ComponentScan -> 아래 어노테이션을 가진 클래스들을 bean으로 등록 ※ 패키지의 위치가 중요함
<@Component, @Configuration, @Repository, @Service, @Controller, @RestController>
- @EnableAutoConfiguration -> spring.factories의 key로 설정되어있는 클래스들을 읽어서 bean으로 등록한다.
- spring.factories
- org.springframework.boot.autoconfigure.EnableAutoConfiguration
- @Configuration
- @ConditionalOnXxxYyyZzz
※ @@ConditionalOnMissingBean -> bean이 없는경우 등록하게 하는 어노테이션

[Custom autoconfiguration]
- Xxx-Spring-Boot-Autoconfigure 모듈: 자동 설정
- Xxx-Spring-Boot-Starter 모듈: 필요한 의존성 정의
- 그냥 하나로 만들고 싶을 때는?
- Xxx-Spring-Boot-Starter
<구현방법>
1. 의존성을 다음과 같이 추가한다.
<dependencies>
   <dependency>
       <groupId>org.springframework.boot</groupId>
       <artifactId>spring-boot-autoconfigure</artifactId>
   </dependency>
   <dependency>
       <groupId>org.springframework.boot</groupId>
       <artifactId>spring-boot-autoconfigure-processor</artifactId>
       <optional>true</optional>
   </dependency>
</dependencies>

<dependencyManagement>
   <dependencies>
       <dependency>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-dependencies</artifactId>
           <version>2.0.3.RELEASE</version>
           <type>pom</type>
           <scope>import</scope>
       </dependency>
   </dependencies>
</dependencyManagement>
2. @Configuration 파일 작성
3. src/main/resource/META-INF에 spring.factories 파일 만들기
4. spring.factories 안에 자동 설정 파일 추가
5. org.springframework.boot.autoconfigure.EnableAutoConfiguration=\FQCN,\FQCN
6. mvn install

※ 스프링부트는 componetscan 후 autoconfiguration을 실행한다.
- 즉 componetscan으로 생성된 빈이있으면 autoconfiguration으로 등록된 빈을 무시하게 되는 것.





